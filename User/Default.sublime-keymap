[
  // Select text between brackets
  { "keys": ["ctrl+shift+space"], "command": "bh_key", "args": { "lines" : true, "plugin": { "type": ["__all__"], "command": "bh_modules.bracketselect" } } }
  ,{ "keys": ["ctrl+'"], "command": "bh_key", "args": { "lines" : true, "plugin": { "type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"], "command": "bh_modules.swapquotes" } } }
  ,{ "keys": ["ctrl+shift+'"], "command": "swap_brackets" }

  ,{ "keys": ["ctrl+i", "ctrl+8"],
    "command": "insert_snippet",
    "args": { "name": "Packages/ntz/WordPress/i8n.sublime-snippet" },
    "context" : [{
          "operand": "source.php",
          "operator": "equal", "match_all": true, "key": "selector"
      }] }

  ,{ "keys": ["ctrl+i", "ctrl+8"],
    "command": "insert_snippet",
    "args": { "name": "Packages/ntz/WordPress/i8n_echo.sublime-snippet" },
    "context" : [{
          "operand": "source.php",
          "operator": "not_equal", "match_all": true, "key": "selector"
      }] }

  ,{ "keys": ["alt+ctrl+space"], "command": "code_intel_auto_complete" }

  ,{ "keys": ["f1"], "command": "side_bar_rename" }
  ,{ "keys": ["alt+shift+delete"], "command": "side_bar_delete" }
  ,{ "keys": ["ctrl+t"], "command": "side_bar_new_file2" }
  ,{ "keys": ["ctrl+alt+f"], "command": "side_bar_find_files_path_containing" }

  ,{ "keys": ["f8"], "command": "show_overlay", "args": {"overlay": "command_palette", "text": "> ["} }
  ,{ "keys": ["f7"], "command": "show_overlay", "args": {"overlay": "command_palette", "text": "Origami"} }
  ,{ "keys": ["alt+shift+`"], "command": "show_overlay", "args": {"overlay": "command_palette", "text": "|- "} }
  ,{ "keys": ["f9"], "command": "show_overlay", "args": {"overlay": "command_palette", "text": "git "} }
  ,{ "keys": ["shift+f9"], "command": "show_overlay", "args": {"overlay": "command_palette", "text": "git flow "} }


  ,{ "keys": ["alt+w"], "command": "toggle_single_line" }
  ,{ "keys": ["alt+["], "command": "jump_back" }
  ,{ "keys": ["alt+]"], "command": "jump_forward" }


  ,{ "keys": ["ctrl+alt+z"], "command": "soft_undo" }
  ,{ "keys": ["ctrl+shift+u"], "command": "soft_redo" }

  ,{ "keys": ["ctrl+b"], "command": "build" }
  ,{ "keys": ["ctrl+shift+b"], "command": "build_selector" }

  ,{ "keys": ["ctrl+shift+tab"], "command": "prev_view" }
  ,{ "keys": ["super+`"], "command": "open_dir", "args": {"dir": "$file_path", "file": "$file_name"} }
  ,{ "keys": ["alt+left"], "command": "move", "args": {"by": "subwords", "forward": false} }
  ,{ "keys": ["alt+right"], "command": "move", "args": {"by": "subword_ends", "forward": true} }

  ,{ "keys": ["alt+up"], "command": "select_lines", "args": {"forward": false} }
  ,{ "keys": ["alt+down"], "command": "select_lines", "args": {"forward": true} }

  ,{ "keys": ["ctrl+t"], "command": "reveal_in_side_bar" }

  ,{ "keys": ["ctrl+f"], "command": "show_panel", "args": {"panel": "replace"} }
  ,{ "keys": ["ctrl+shift+w"], "command": "noop" }
  ,{ "keys": ["insert"], "command": "noop" }

  ,{ "keys": ["alt+backspace"], "command": "run_macro_file", "args": {"file": "Packages/User/delete_subword.sublime-macro"} }
  ,{ "keys": ["alt+delete"], "command": "run_macro_file", "args": {"file": "Packages/User/delete_subword_forward.sublime-macro"} }

  ,{ "keys": ["ctrl+k", "ctrl+r"], "command": "reindent", "args": {"single_line": false}}

  ,{ "keys": ["ctrl+alt+enter"], "command": "expand_selection", "args": {"to": "tag"} }

  ,{ "keys": ["ctrl+alt+shift+a"], "command": "alignment" }
  ,{ "keys": ["ctrl+alt+super+a"], "command": "align_tab" }


  // ,{ "keys": ["super+g"], "command": "exec", "args": {"cmd": [
  //     "C:\\Program Files (x86)\\GitExtensions\\GitExtensions.exe"
  //   ] }
  // }
  // ,{ "keys": ["super+shift+g"], "command": "exec", "args": {"cmd": [
  //     "C:\\Program Files (x86)\\Atlassian\\SourceTree\\SourceTree.exe"
  //   ] }
  // }
  // ,{ "keys": ["alt+shift+`"], "command": "exec", "args": {"cmd": [
  //     "C:\\Program Files\\ConEmu\\ConEmu64.exe", "/Single"
  //   ] }
  // }



  ,{ "keys": ["ctrl+alt+shift+d"], "command": "multi_select_numbers" }


  ,{ "keys": ["tab"], "command": "insert_best_completion", "args": {"default": "\t", "exact": true} },
  { "keys": ["tab"], "command": "insert_best_completion", "args": {"default": "\t", "exact": false},
    "context":
    [
      { "key": "setting.tab_completion", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["tab"], "command": "reindent", "context":
    [
      { "key": "setting.auto_indent", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_match", "operand": "^$", "match_all": true },
      { "key": "following_text", "operator": "regex_match", "operand": "^$", "match_all": true }
    ]
  },
  { "keys": ["tab"], "command": "indent", "context":
    [
      { "key": "text", "operator": "regex_contains", "operand": "\n" }
    ]
  },
  { "keys": ["tab"], "command": "next_field", "context":
    [
      { "key": "has_next_field", "operator": "equal", "operand": true }
    ]
  },
  { "keys": ["tab"], "command": "commit_completion", "context":
    [
      { "key": "auto_complete_visible" },
      { "key": "setting.auto_complete_commit_on_tab" }
    ]
  }

  // ,{ "keys": ["tab"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
  //   [
  //     { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
  //     { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
  //     { "key": "following_text", "operator": "regex_contains", "operand": "^\\s?(\\]|\\)|\\}|>|\\\"|'|\\;)", "match_all": true },
  //     { "key": "has_next_field", "operator": "not_equal", "operand": true }
  //   ]
  // }

  ,{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`$0`"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^(?:\t| |\\)|]|\\}|$)", "match_all": true },
      { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\"a-zA-Z0-9_]$", "match_all": true },
      { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true }
    ]
  }
  ,{ "keys": ["`"], "command": "insert_snippet", "args": {"contents": "`${0:$SELECTION}`"}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  }
  ,{ "keys": ["`"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true }
    ]
  }

  ,{ "keys": [")"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^)", "match_all": true }
    ]
  }
  ,{ "keys": ["]"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^]", "match_all": true }
    ]
  }
  ,{ "keys": ["}"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true }
    ]
  }
  ,{ "keys": [">"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^>", "match_all": true }
    ]
  }

  ,{ "keys": ["<"], "command": "insert_snippet", "args": {"contents": "<${0:$SELECTION}>"}, "context":
    [
      { "key": "selection_empty", "operator": "equal", "operand": false, "match_all": true }
    ]
  }


  ,{ "keys": ["backspace"], "command": "run_macro_file", "args": {"file": "Packages/Default/Delete Left Right.sublime-macro"}, "context":
    [
      { "key": "setting.auto_match_tilda_enabled", "operator": "equal", "operand": true },
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true }
    ]
  }

  ,{ "keys": ["="], "command": "move", "args": {"by": "characters", "forward": true}, "context":
    [
      { "key": "setting.auto_match_enabled", "operator": "equal", "operand": true },
      { "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true },
      { "key": "following_text", "operator": "regex_contains", "operand": "^\\=", "match_all": true }
    ]
  }


  ,{ "keys": ["super+alt+ctrl+up"],   "command": "inc_dec_value", "args": { "action": "inc_all" } }
  ,{ "keys": ["super+alt+ctrl+down"], "command": "inc_dec_value", "args": { "action": "dec_all" } }
  ,{ "keys": ["super+alt+up"],   "command": "inc_dec_value", "args": { "action": "inc_max" } }
  ,{ "keys": ["super+alt+down"], "command": "inc_dec_value", "args": { "action": "dec_max" } }
  ,{ "keys": ["super+ctrl+up"],  "command": "inc_dec_value", "args": { "action": "inc_min" } }
  ,{ "keys": ["super+ctrl+down"],"command": "inc_dec_value", "args": { "action": "dec_min" } }


  ,{"keys": ["ctrl+alt+insert"], "command": "single_selection", "context": [ { "key": "num_selections", "operator": "not_equal", "operand": 1 } ] }
  ,{"keys": ["ctrl+alt+insert"], "command": "clear_fields", "context": [ { "key": "has_next_field", "operator": "equal", "operand": true } ] }
  ,{"keys": ["ctrl+alt+insert"], "command": "clear_fields", "context": [ { "key": "has_prev_field", "operator": "equal", "operand": true } ] }
  ,{"keys": ["ctrl+alt+insert"], "command": "hide_panel", "args": {"cancel": true}, "context": [ { "key": "panel_visible", "operator": "equal", "operand": true } ] }
  ,{"keys": ["ctrl+alt+insert"], "command": "hide_overlay", "context": [ { "key": "overlay_visible", "operator": "equal", "operand": true } ] }
  ,{"keys": ["ctrl+alt+insert"], "command": "hide_auto_complete", "context": [ { "key": "auto_complete_visible", "operator": "equal", "operand": true } ] }


  /* Overriding Tabs */
  ,{ "keys": ["ctrl+insert"], "command": "insert_best_completion", "args": {"default": "\t", "exact": true} }
  ,{ "keys": ["ctrl+insert"], "command": "insert_best_completion", "args": {"default": "\t", "exact": false} }
  ,{ "keys": ["ctrl+insert"], "command": "replace_completion_with_next_completion", "context": [ { "key": "last_command", "operator": "equal", "operand": "insert_best_completion" } ] }


  /* Emmet Keys */
  ,{ "keys": [ "shift+ctrl+;" ], "args": { "action": "remove_tag" }, "command": "run_emmet_action" }
  ,{ "keys": [ "shift+ctrl+alt+=" ], "args": { "action": "evaluate_math_expression" }, "command": "run_emmet_action" }
  // ,{ "keys": [ "ctrl+e" ], "args": { "action": "expand_abbreviation" }, "command": "run_emmet_action" }

  ,{
      "keys": [ "ctrl+shift+forward_slash" ],
      "args": { "action": "toggle_comment" },
      "command": "run_emmet_action",
      "context": [{
        "operand": "source.css - source.css.less, text.xml, text.html - source",
        "operator": "equal",  "match_all": true, "key": "selector" } ]
  }

  // ,{ "keys": [ "ctrl+alt+enter" ], "command": "expand_as_you_type", "context": [ { "operand": false,  "operator": "equal", "match_all": true, "key": "setting.is_widget" }] }

  ,{ "keys": [ "ctrl+shift+," ], "args": { "action": "match_pair_inward" }, "command": "run_emmet_action" }
  ,{ "keys": [ "ctrl+shift+." ], "args": { "action": "match_pair_outward" }, "command": "run_emmet_action", }

  // ,{
  //   "keys": [ "shift+ctrl+r" ],
  //   "args": { "action": "reflect_css_value" }, "command": "run_emmet_action"
  // }

  ,{ "keys": [ "alt+shift+." ], "args": { "action": "select_next_item" }, "command": "run_emmet_action" }
  ,{ "keys": [ "alt+shift+," ], "args": { "action": "select_previous_item" },  "command": "run_emmet_action" }

  ,{ "keys": [ "ctrl+alt+left" ],  "args": { "action": "prev_edit_point" }, "command": "run_emmet_action" }
  ,{ "keys": [ "ctrl+alt+right" ], "args": { "action": "next_edit_point" }, "command": "run_emmet_action" }

  ,{ "keys": [ "shift+ctrl+g" ], "command": "wrap_as_you_type", "context": [ { "operand": false, "operator": "equal", "match_all": true, "key": "setting.is_widget" } ] }
  ,{ "keys": [ "alt+enter" ], "command": "wrap_as_you_type", "context": [ { "operand": false, "operator": "equal", "match_all": true, "key": "setting.is_widget" } ] }

  ,{ "keys": ["ctrl+shift+a"], "command": "rename_tag" }
  ,{ "keys": [ "ctrl+alt+j" ], "args": { "action": "matching_pair" }, "command": "run_emmet_action"}

  // the following autohotkey script will bind Capslock to ctrl+insert.
  // if you still need old capslock functionality, just press shift+caps

  // +Capslock::Capslock
  // Capslock::^Insert
  ,{
    "keys": [ "ctrl+insert" ],
    "command": "expand_abbreviation_by_tab",
    "context": [
      {
        "operand": "source.css, source.sass, source.less, source.scss, source.stylus, text.xml, text.html, text.haml, text.scala.html, source string",
        "operator": "equal", "match_all": true, "key": "selector"
      },
      {
        "operand": "text.html source.php, text.html source.js, storage.type.templatetag.django",
        "operator": "not_equal", "match_all": true, "key": "selector"
      },
      { "match_all": true, "key": "selection_empty" },
      { "operator": "equal", "operand": false, "match_all": true, "key": "has_next_field" },
      { "operand": false, "operator": "equal", "match_all": true, "key": "auto_complete_visible" },
      { "match_all": true, "key": "is_abbreviation" }
    ]
  }


  ,{
    "keys": [ "enter" ],
    "args": { "contents": "\n\t${0}\n" },
    "command": "insert_snippet",
    "context": [
      { "operand": "meta.scope.between-tag-pair.html, meta.scope.between-tag-pair.xml", "match_all": true, "key": "selector" },
      { "operand": false, "match_all": true, "key": "auto_complete_visible" },
      { "match_all": true, "key": "clear_fields_on_enter_key" },
    ]
  }

  ,{ "keys": ["super+alt+."], "command": "goto_css_declaration", "args": {"goto": "next"} }
  ,{ "keys": ["super+alt+,"],  "command": "goto_css_declaration", "args": {"goto": "prev"} }

  // ,{ "keys": ["ctrl+shift+g"], "command": "grasp", "context": [ { "key": "selector", "operator": "equal", "operand": "source.js" } ]  }

  ,{ "keys": ["ctrl+shift+r"], "command": "goto_symbol_in_project" }
]